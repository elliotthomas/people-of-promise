{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\n\nvar Matcher = function () {\n  function Matcher(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var factory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, Matcher);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"propName\", void 0);\n\n    _defineProperty(this, \"inverseName\", void 0);\n\n    _defineProperty(this, \"factory\", void 0);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (!name || name.toLowerCase() === 'html') {\n        throw new Error(\"The matcher name \\\"\".concat(name, \"\\\" is not allowed.\"));\n      }\n    }\n\n    this.options = _objectSpread({}, options);\n    this.propName = name;\n    this.inverseName = \"no\".concat(name.charAt(0).toUpperCase() + name.slice(1));\n    this.factory = factory;\n  }\n\n  _createClass(Matcher, [{\n    key: \"createElement\",\n    value: function createElement(match, props) {\n      var element = null;\n\n      if (this.factory) {\n        element = React.createElement(this.factory, props, match);\n      } else {\n        element = this.replaceWith(match, props);\n      }\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (typeof element !== 'string' && !React.isValidElement(element)) {\n          throw new Error(\"Invalid React element created from \".concat(this.constructor.name, \".\"));\n        }\n      }\n\n      return element;\n    }\n  }, {\n    key: \"doMatch\",\n    value: function doMatch(string, pattern, callback) {\n      var matches = string.match(pattern instanceof RegExp ? pattern : new RegExp(pattern, 'i'));\n\n      if (!matches) {\n        return null;\n      }\n\n      return _objectSpread({}, callback(matches), {\n        match: matches[0]\n      });\n    }\n  }, {\n    key: \"onBeforeParse\",\n    value: function onBeforeParse(content, props) {\n      return content;\n    }\n  }, {\n    key: \"onAfterParse\",\n    value: function onAfterParse(content, props) {\n      return content;\n    }\n  }]);\n\n  return Matcher;\n}();\n\nexport { Matcher as default };","map":null,"metadata":{},"sourceType":"module"}