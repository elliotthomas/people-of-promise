{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _pt from \"prop-types\";\nimport React from 'react';\nimport Parser from './Parser';\nimport Markup from './Markup';\n\nvar Interweave = function (_React$PureComponent) {\n  _inherits(Interweave, _React$PureComponent);\n\n  function Interweave() {\n    _classCallCheck(this, Interweave);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Interweave).apply(this, arguments));\n  }\n\n  _createClass(Interweave, [{\n    key: \"parseMarkup\",\n    value: function parseMarkup() {\n      var _this = this;\n\n      var _ref = this.props,\n          tagName = _ref.tagName,\n          content = _ref.content,\n          emptyContent = _ref.emptyContent,\n          onBeforeParse = _ref.onBeforeParse,\n          onAfterParse = _ref.onAfterParse,\n          matchers = _ref.matchers,\n          disableMatchers = _ref.disableMatchers,\n          filters = _ref.filters,\n          disableFilters = _ref.disableFilters,\n          props = _objectWithoutProperties(_ref, [\"tagName\", \"content\", \"emptyContent\", \"onBeforeParse\", \"onAfterParse\", \"matchers\", \"disableMatchers\", \"filters\", \"disableFilters\"]);\n\n      var allMatchers = disableMatchers ? [] : matchers;\n      var allFilters = disableFilters ? [] : filters;\n      var beforeCallbacks = onBeforeParse ? [onBeforeParse] : [];\n      var afterCallbacks = onAfterParse ? [onAfterParse] : [];\n      allMatchers.forEach(function (matcher) {\n        if (matcher.onBeforeParse) {\n          beforeCallbacks.push(matcher.onBeforeParse.bind(matcher));\n        }\n\n        if (matcher.onAfterParse) {\n          afterCallbacks.push(matcher.onAfterParse.bind(matcher));\n        }\n      });\n      var markup = beforeCallbacks.reduce(function (string, callback) {\n        var nextString = callback(string, _this.props);\n\n        if (\"production\" !== process.env.NODE_ENV) {\n          if (typeof nextString !== 'string') {\n            throw new TypeError('Interweave `onBeforeParse` must return a valid HTML string.');\n          }\n        }\n\n        return nextString;\n      }, content || '');\n      var parser = new Parser(markup, props, allMatchers, allFilters);\n      var nodes = afterCallbacks.reduce(function (parserNodes, callback) {\n        var nextNodes = callback(parserNodes, _this.props);\n\n        if (\"production\" !== process.env.NODE_ENV) {\n          if (!Array.isArray(nextNodes)) {\n            throw new TypeError('Interweave `onAfterParse` must return an array of strings and React elements.');\n          }\n        }\n\n        return nextNodes;\n      }, parser.parse());\n\n      if (nodes.length === 0) {\n        return emptyContent;\n      }\n\n      return nodes;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disableLineBreaks = _this$props.disableLineBreaks,\n          disableWhitelist = _this$props.disableWhitelist,\n          emptyContent = _this$props.emptyContent,\n          noHtml = _this$props.noHtml,\n          noHtmlExceptMatchers = _this$props.noHtmlExceptMatchers,\n          tagName = _this$props.tagName;\n      return React.createElement(Markup, {\n        disableLineBreaks: disableLineBreaks,\n        disableWhitelist: disableWhitelist,\n        emptyContent: emptyContent,\n        noHtml: noHtml,\n        noHtmlExceptMatchers: noHtmlExceptMatchers,\n        tagName: tagName,\n        parsedContent: this.parseMarkup()\n      });\n    }\n  }]);\n\n  return Interweave;\n}(React.PureComponent);\n\n_defineProperty(Interweave, \"propTypes\", {\n  disableFilters: _pt.bool,\n  disableMatchers: _pt.bool,\n  filters: _pt.arrayOf(_pt.any),\n  matchers: _pt.arrayOf(_pt.any),\n  onAfterParse: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),\n  onBeforeParse: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),\n  transform: _pt.oneOfType([_pt.any, _pt.oneOf([null])])\n});\n\n_defineProperty(Interweave, \"defaultProps\", {\n  content: '',\n  disableFilters: false,\n  disableLineBreaks: false,\n  disableMatchers: false,\n  disableWhitelist: false,\n  emptyContent: null,\n  filters: [],\n  matchers: [],\n  noHtml: false,\n  noHtmlExceptMatchers: false,\n  onAfterParse: null,\n  onBeforeParse: null,\n  tagName: 'span',\n  transform: null\n});\n\nexport { Interweave as default };","map":null,"metadata":{},"sourceType":"module"}